#include <bits/stdc++.h>
using namespace std;


int root(int a, int* link){
    while(link[a]!=a){
     link[a]=link[link[a]];
     a = link[a];
    }
    return a;
}

void union1(int a, int b, int* link){
    int p = root(a, link);
    int q = root(b, link);
    link[p] = link[q];
}


float kruskal(pair<float, pair<int,int> > lista[], int *link, int edges){
    int x,y;
    int cost,minimum=0;
    for(int i = 0; i<edges; i++){
        x = lista[i].second.first;
        y = lista[i].second.second;
        cost = lista[i].first;
        if(root(x,link)!=root(y,link)){
            minimum = minimum+cost;
            union1(x,y,link);
        }
    }
    return minimum;
}


int main()
{
 int n,m,a,b,w;
 cin >> n >> m;
 int link[n];
 pair<float, pair<int,int> > lista[m];
 for(int i=0; i<n; i++)
  link[i]=i;
 for(int i=0; i<m; i++){
    cin >> a >> b >> w;
    lista[i].first = w;
    lista[i].second = make_pair(a,b);
 }
 sort(lista, lista + m);
 cout << kruskal(lista,link,m);
}
