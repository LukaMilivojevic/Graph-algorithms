#include<bits/stdc++.h> 
using namespace std; 
  
void add_edge(list <pair<int, int> > adj[], int u, int v, int w) 
{ 
    adj[u].push_back(make_pair(v, w)); 
    adj[v].push_back(make_pair(u, w)); 
} 
   
void shortest(list<pair<int,int> > graf[], int n, int start) 
{ 

    priority_queue< pair<int, int>, vector <pair<int, int>> , greater<pair<int, int>> > pq; 
    vector<int> dist(n, INT_MAX); 
    pq.push(make_pair(0, start)); 
    dist[start] = 0; 
  
    while (!pq.empty()) 
    { 
        int u = pq.top().second; 
        pq.pop(); 
        for(list<pair<int,int> >::iterator it = graf[u].begin(); it!=graf[u].end(); it++)
        { 
            int v = it->first; 
            int weight = it->second; 
  
            if (dist[v] > dist[u] + weight) 
            { 
                dist[v] = dist[u] + weight; 
                pq.push(make_pair(dist[v], v)); 
            } 
        } 
    } 
    for (int i = 0; i < n; ++i) 
        printf("%d \t %d\n", i, dist[i]); 
} 
  
int main() 
{ 
    int n,m,a,b,w;
    scanf("%d%d",&n,&m);
    list<pair<int,int> > graf[n];
    for(int i=0; i<m; i++){
        scanf("%d%d%d",&a,&b,&w);
        add_edge(graf,a,b,w);
    }
    shortest(graf, n, 0); 
    return 0; 
} 
