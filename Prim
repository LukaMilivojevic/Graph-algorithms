#include<bits/stdc++.h>
using namespace std;

void add_edge(list<pair<int,int> > lista[], int a, int b, int w){
    lista[a].push_back(make_pair(w,b));
    lista[b].push_back(make_pair(w,a));
}

int prim(list<pair<int,int> > lista[], int start, int n){
    int visited[n];
    int cost = 0;
    for(int i=0; i<n; i++)
        visited[i]=0;
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>> > pq;
    pq.push(make_pair(0,start));
    while(!pq.empty()){
        int p1 = pq.top().first;
        int p2 = pq.top().second;
        pq.pop();
        if(visited[p2]==1)
            continue;
        cost+=p1;
        visited[p2]=1;
        for(auto it = lista[p2].begin(); it != lista[p2].end(); it++)
            if(visited[it->second]==0)
                pq.push(make_pair(it->first,it->second));
    }
    return cost;
}

int main()
{
 int a,b,w,n,m;
 cin >> n >> m;
 list<pair<int,int> > lista[n];
 for(int i=0; i<m; i++){
     cin >> a >> b >> w;
     add_edge(lista,a,b,w);
 }
 cout << prim(lista,0,n);
}
