#include <stdlib.h>
#include <stdio.h>
#include <list>
#include <iterator>
#include <queue>
using namespace std;

int broj(int** polje, int** visited, int n, int m, int num_of_bad){
    queue <pair<int,int> > wait;

    int br=0;
    int x,y;
    int state=0;
    while(state!=num_of_bad)
    for(int i=0; i<n; i++)
      for(int j=0; j<m; j++)
    if(visited[i][j]==0 && polje[i][j]!=0){
            x=i;
            y=j;
            wait.push(make_pair(x,y));
            visited[x][y]=1;
            state++;
    while(!wait.empty()){
        x=wait.front().first;
        y=wait.front().second;
        if(x+1<n && polje[x+1][y] !=0 && visited[x+1][y]==0){
            visited[x+1][y]=1;
            wait.push(make_pair(x+1,y));
            state++;
        }
        if(x-1>=0 && polje[x-1][y] !=0 && visited[x-1][y]==0){
            visited[x-1][y]=1;
            wait.push(make_pair(x-1,y));
            state++;
        }
        if(y+1<m && polje[x][y+1] !=0 && visited[x][y+1]==0){
            visited[x][y+1]=1;
            wait.push(make_pair(x,y+1));
            state++;
        }
        if(y-1>=0 && polje[x][y-1] !=0 && visited[x][y-1]==0){
            visited[x][y-1]=1;
            wait.push(make_pair(x,y-1));
            state++;
        }
        if(x+1<n && y+1<m && polje[x+1][y+1] !=0 && visited[x+1][y+1]==0){
            visited[x+1][y+1]=1;
            wait.push(make_pair(x+1,y+1));
            state++;
        }
        if(x+1<n && y-1>=0 && polje[x+1][y-1] !=0 && visited[x+1][y-1]==0){
            visited[x+1][y-1]=1;
            wait.push(make_pair(x+1,y-1));
            state++;
        }
        if(x-1>=0 && y+1<m && polje[x-1][y+1] !=0 && visited[x-1][y+1]==0){
            visited[x-1][y+1]=1;
            wait.push(make_pair(x-1,y+1));
            state++;
        }
        if(x-1>=0 && y-1>=0 && polje[x-1][y-1] !=0 && visited[x-1][y-1]==0){
            visited[x-1][y-1]=1;
            wait.push(make_pair(x-1,y-1));
            state++;
        }
        wait.pop();
    }
    br++;
    }
    return br;
}


int main(){
  int n,m,x,y;
  int br=0;
  scanf("%d%d",&n,&m);
  int** polje = new int*[n];
  int** visited = new int*[n];
  int num_of_bad=0;
  for(int i=0; i<n; i++){
    polje[i] = new int[m];
    visited[i] = (int*)calloc(m, sizeof(int));
  }

  for(int i=0; i<n; i++)
    for(int j=0; j<m; j++){
     scanf("%d",&polje[i][j]);
     if(polje[i][j]!=0)
        num_of_bad++;
    }

   printf("%d", broj(polje,visited,n,m, num_of_bad));


return 0;
}


