#include <bits/stdc++.h>
using namespace std;

enum Color {WHITE, GRAY, BLACK};

class Graph
{
    int V;
    list<int>* adj;
    bool DFS(int v, int color[]);
public:
    Graph(int V);
    void addEdge(int v, int w);

    bool isCyclic();
};

Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V];
}

void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w);
}

bool Graph::DFS(int u, int color[])
{
    color[u] = GRAY;

    list<int>::iterator i;
    for (i = adj[u].begin(); i != adj[u].end(); ++i)
    {
        int v = *i;
        if (color[v] == GRAY)
          return true;

        if (color[v] == WHITE && DFS(v, color))
          return true;
    }
    color[u] = BLACK;

    return false;
}

bool Graph::isCyclic()
{
    int *color = new int[V];
    for (int i = 0; i < V; i++)
        color[i] = WHITE;
    for (int i = 0; i < V; i++)
        if (color[i] == WHITE)
           if (DFS(i, color) == true)
              return true;

    return false;
}

int main()
{
    int n,m,a,b;
    scanf("%d%d",&n,&m);
    Graph g(n);
    for(int i=0; i<m; i++){
        scanf("%d%d",&a,&b);
        g.addEdge(a,b);
    }
    if (g.isCyclic())
        printf("Ciklican");
    else
        printf("Aciklican");

    return 0;
}
