#include<bits/stdc++.h>
using namespace std;

void add_edge(list<pair<int,int> > lista[], int a, int b, int w){
    lista[a].push_back(make_pair(w,b));
    lista[b].push_back(make_pair(w,a));
}

void dfs(list<pair<int,int> > lista[], int br, int start, int* visited, vector<int> niz[]){
    visited[start]=1;
    for(auto it = lista[start].begin(); it != lista[start].end(); it++)
        if(visited[it->second]==0)
            dfs(lista,br,it->second,visited,niz);
    niz[br].push_back(start);
}

int prim(list<pair<int,int> > lista[], int n, int x){
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>> > pq;
    int visited[n];
    int cost=0;
    for(int i=0; i<n; i++)
        visited[i]=0;
    pq.push(make_pair(0,x));
    while(!pq.empty()){
        int p1 = pq.top().first;
        int p2 = pq.top().second;
        pq.pop();
        if(visited[p2]==1)
            continue;
        cost+=p1;
        visited[p2]=1;
        for(auto it = lista[p2].begin(); it != lista[p2].end(); it++)
            if(visited[it->second]==0)
                pq.push(make_pair(it->first,it->second));
    }
    return cost;
}

int main()
{
int n,m,a,b,w,s,br,x;
cin >> n >> m;
int visited[n];
vector<int> niz[n];
vector<int> suma;
for(int i=0; i<n; i++)
    visited[i]=0;
list<pair<int,int> > lista[n];
for(int i=0; i<m; i++){
    cin >> a >> b >> w;
    add_edge(lista,a,b,w);
}
br=0;
for(int i=0; i<n; i++)
    if(visited[i]==0){
        dfs(lista,br,i,visited,niz);
        br++;
    }
for(int i=0; i<br; i++){
    s=0;
    while(!niz[i].empty()){
        x=*niz[i].begin();
        for(auto it = lista[x].begin(); it != lista[x].end(); it++)
            s+=it->first;
        niz[i].erase(niz[i].begin());
    }
    suma.push_back(s);
}
for(auto it = suma.begin(); it != suma.end(); it++)
    cout << *it/2 << "\n";
    
vector<int> suma1;
for(int i=0; i<br; i++){
    x = *niz[i].begin();
    suma1.push_back(prim(lista,n,x));
}
for(auto it = suma1.begin(); it != suma1.end(); it++)
   cout << *it << "\n";
}
